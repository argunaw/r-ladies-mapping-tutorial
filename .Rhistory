unzip(paste0(zip_dl, "/parks_properties.zip"),
exdir=temp_folder)
old_files <- list.files(temp_folder, pattern = "geo*", full.names = TRUE)
new_names = gsub("^.*?\\.","parks_properties.",old_files)
file.copy(from=old_files, to=paste0(new_dir, "/", new_names))
file.remove(old_files)
list.files(new_dir)
parks_properties <- st_transform(st_read(new_dir, "parks_properties"), 2263)
###remove excess sf dataframes
rm(rest)
rm(rest_sf)
rm(sf_proj)
gc()
rm(parks)
####data for zoomed in map
ntas_cropped <- st_crop(ntas, xmin = 994462.6, xmax = 1005982.5,
ymin = 181378.1, ymax = 188278.7)
rest_cropped <- st_intersection(sf_proj, ntas_cropped)
streets_cropped <- st_intersection(lion_condensed, ntas_cropped)
parks_properties_cropped <- st_intersection(parks_properties, ntas_cropped) %>%
subset(!landuse %in% c("Mall", "Parkway"))
ggplot()+
geom_sf(data=ntas_cropped, fill="white")+
#geom_sf(data=parks_cropped, fill="#a1c690", color="lightgrey")+
geom_sf(data = streets_cropped, color="#f2f2f2", size=.005)+
geom_sf(data=rest_cropped, color="red", size=.2)+
theme(panel.background = element_rect(fill = "white"),
axis.ticks = element_blank(),
axis.text = element_blank(),
panel.grid = element_line(color = "white", size = 0.8))
####data for zoomed in map
ntas_cropped <- st_crop(ntas, xmin = 994462.6, xmax = 1005982.5,
ymin = 181378.1, ymax = 188278.7)
rest_cropped <- st_intersection(rests_sf, ntas_cropped)
streets_cropped <- st_intersection(lion_condensed, ntas_cropped)
parks_properties_cropped <- st_intersection(parks_properties, ntas_cropped) %>%
subset(!landuse %in% c("Mall", "Parkway"))
View(parks_properties)
View(parks_properties)
View(parks_properties)
unique(parks_properties$typecatego)
####data for zoomed in map
ntas_cropped <- st_crop(ntas, xmin = 994462.6, xmax = 1005982.5,
ymin = 181378.1, ymax = 188278.7)
rest_cropped <- st_intersection(rests_sf, ntas_cropped)
streets_cropped <- st_intersection(lion_condensed, ntas_cropped)
parks_properties_cropped <- st_intersection(parks_properties, ntas_cropped) %>%
###remove excess parks area like the green space on Eastern Parkway
subset(!typecatego %in% c("Mall", "Parkway"))
View(ntas)
st_bbox(ntas[ntas$ntaname=="Crown Heights North"])
str(ntas)
st_bbox(ntas[ntas$ntaname=="Crown Heights North",])
bounding_box = st_bbox(ntas[ntas$ntaname=="Crown Heights North"])
####data for zoomed in map
ntas_cropped <- st_crop(ntas, bounding_box)
rest_cropped <- st_intersection(rests_sf, ntas_cropped)
streets_cropped <- st_intersection(lion_condensed, ntas_cropped)
parks_properties_cropped <- st_intersection(parks_properties, ntas_cropped) %>%
###remove excess parks area like the green space on Eastern Parkway
subset(!typecatego %in% c("Mall", "Parkway"))
bounding_box = st_bbox(ntas[ntas$ntaname=="Crown Heights North",])
####data for zoomed in map
ntas_cropped <- st_crop(ntas, bounding_box)
rest_cropped <- st_intersection(rests_sf, ntas_cropped)
streets_cropped <- st_intersection(lion_condensed, ntas_cropped)
parks_properties_cropped <- st_intersection(parks_properties, ntas_cropped) %>%
###remove excess parks area like the green space on Eastern Parkway
subset(!typecatego %in% c("Mall", "Parkway"))
ggplot()+
geom_sf(data=ntas_cropped, fill="white")+
geom_sf(data=parks_properties_cropped, fill="#a1c690", color="lightgrey")+
geom_sf(data = streets_cropped, color="#f2f2f2", size=.005)+
geom_sf(data=rest_cropped, color="red", size=.2)+
theme(panel.background = element_rect(fill = "white"),
axis.ticks = element_blank(),
axis.text = element_blank(),
panel.grid = element_line(color = "white", size = 0.8))
ggplot()+
geom_sf(data=ntas_cropped, fill="white")+
geom_sf(data=parks_cropped, fill="#a1c690", color="lightgrey")+
geom_sf(data = streets_cropped, color="#f2f2f2", size=.005)+
geom_sf_text(data=streets_cropped,
aes(label=Street, family="serif"), colour = "black", size=2)+
geom_sf(data=rest_cropped, color="red", size=.2)+
theme(panel.background = element_rect(fill = "white"),
axis.ticks = element_blank(),
axis.text = element_blank(),
panel.grid = element_line(color = "white", size = 0.8))
ggplot()+
geom_sf(data=ntas_cropped, fill="white")+
geom_sf(data=parks_properties_cropped, fill="#a1c690", color="lightgrey")+
geom_sf(data = streets_cropped, color="#f2f2f2", size=.005)+
geom_sf_text(data=streets_cropped,
aes(label=Street, family="serif"), colour = "black", size=2)+
geom_sf(data=rest_cropped, color="red", size=.2)+
theme(panel.background = element_rect(fill = "white"),
axis.ticks = element_blank(),
axis.text = element_blank(),
panel.grid = element_line(color = "white", size = 0.8))
###union roads for the purpose of labeling
roads.out <- streets_cropped %>%
group_by(Street) %>%
summarize(geometry = st_union(SHAPE))
#g <-
ggplot() +
geom_sf(data=streets_cropped, aes(color="streets"), show.legend = "line", size=.005)+
#geom_sf(data = ntas_cropped, fill=NA, color="black")+
geom_sf(data=parks_properties_cropped, fill="#a1c690", color=NA)+
geom_sf_text(data=roads.out[roads.out$Street=="ATLANTIC AVENUE",],
aes(label=Street, family="serif"), colour = "black", size=2, angle=-5
,nudge_x=1600, nudge_y=-35)+
geom_sf_text(data=roads.out[roads.out$Street=="FRANKLIN AVENUE",],
aes(label=Street, family="serif"), colour = "black", size=2,
angle=80 ,
nudge_x = -70, nudge_y = 350)+
geom_sf_text(data=roads.out[roads.out$Street=="EASTERN PARKWAY",],
aes(label=Street, family="serif"), colour = "black", size=2, angle=-5,
nudge_x = 5000, nudge_y=-750)+
geom_sf(data=rest_cropped, aes(color="Restaurants"), show.legend = "point", size=1.2)+
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
rect = element_blank(),
panel.background = element_blank(),
plot.background = element_rect(fill = "white"),#, color = "grey20"),size = 2),
plot.title= element_text(colour="black", size = 24, face = "bold", hjust=0.5,),
legend.position = "right") +
theme(legend.title = element_blank(),
legend.spacing.y = unit(0, "mm"),
panel.border = element_rect(colour = "black", fill=NA),
aspect.ratio = 1, axis.text = element_text(colour = 1, size = 12),
legend.background = element_blank(),
legend.box.background = element_rect(colour = "black"))+
labs(title = "Open Restaurant Permits \n Crown Heights North")+
xlab("") +
ylab("")+
scale_colour_manual(values = c("Restaurants" = "red", "streets"="darkgrey"),
guide = guide_legend(override.aes = list(linetype =  c("blank", "solid"),
shape=c(16, NA))))+
scalebar(ntas_cropped, dist = .5, dist_unit = "mi", location="bottomleft",
transform = FALSE, model = "WGS84")
#g <-
ggplot() +
geom_sf(data=streets_cropped, aes(color="streets"), show.legend = "line", size=.005)+
geom_sf(data=parks_properties_cropped, fill="#a1c690", color=NA)+
geom_sf_text(data=roads.out[roads.out$Street=="ATLANTIC AVENUE",],
aes(label=Street, family="serif"), colour = "black", size=2, angle=-5
,nudge_x=1600, nudge_y=-35)+
geom_sf_text(data=roads.out[roads.out$Street=="FRANKLIN AVENUE",],
aes(label=Street, family="serif"), colour = "black", size=2,
angle=80 ,
nudge_x = -70, nudge_y = 350)+
geom_sf_text(data=roads.out[roads.out$Street=="EASTERN PARKWAY",],
aes(label=Street, family="serif"), colour = "black", size=2, angle=-5,
nudge_x = 5000, nudge_y=-750)+
geom_sf(data=rest_cropped, aes(color="Restaurant Permits"), show.legend = "point", size=1.2)+
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
rect = element_blank(),
panel.background = element_blank(),
plot.background = element_rect(fill = "white"),
plot.title= element_text(colour="black", size = 20, face = "bold", hjust=0.5,),
legend.position = "right") +
theme(legend.title = element_blank(),
legend.spacing.y = unit(0, "mm"),
panel.border = element_rect(colour = "black", fill=NA),
aspect.ratio = 1, axis.text = element_text(colour = 1, size = 12),
legend.background = element_blank(),
legend.box.background = element_rect(colour = "black"))+
labs(title = "Open Restaurant Permits \n Crown Heights North")+
xlab("") +
ylab("")+
scale_colour_manual(values = c("Restaurant Permits" = "red", "streets"="darkgrey"),
guide = guide_legend(override.aes = list(linetype =  c("blank", "solid"),
shape=c(16, NA))))+
scalebar(ntas_cropped, dist = .5, dist_unit = "mi", location="bottomleft",
transform = FALSE, model = "WGS84")
library(rgdal) ###used for projections and importing data
library(ggplot2) ##creating the map
library(sf) ## data is stored as sf dataframes
library(data.table)
library(dplyr) ##data transformations
library(RColorBrewer) #color palettes
library(stringr) ##string manipulation when filtering dataframes
library(ggthemes) ##map design
library(magrittr) ##pipes
library(classInt) ##intervals for legend
library(grDevices) ### added for export to PDF
library(tmap) ###interactive mapping
#### destination for all unzipped folders
zip_dl = "C:/Users/AyanthiGunawardana/Documents/r-ladies-mapping-tutorial-main/Testing"
##create a temporary folder to unzip (only do this once, not for every file)
###note that every folder here is already on my hard drive EXCEPT the folder at the end of string. if the entire string is a series of new folders, you need to add recursive=TRUE
temp_folder= paste0(zip_dl, "/temp")
dir.create(temp_folder)
###final folder for all shapefiles
###create new folder (only do this once, not for every file)
new_dir <-  paste0(zip_dl, "/shps")
dir.create(new_dir)
#### destination for all unzipped folders
zip_dl = "C:/Users/argun/Documents/r-ladies-mapping-tutorial-main/Testing"
##create a temporary folder to unzip (only do this once, not for every file)
###note that every folder here is already on my hard drive EXCEPT the folder at the end of string. if the entire string is a series of new folders, you need to add recursive=TRUE
temp_folder= paste0(zip_dl, "/temp")
dir.create(temp_folder)
###final folder for all shapefiles
###create new folder (only do this once, not for every file)
new_dir <-  paste0(zip_dl, "/shps")
dir.create(new_dir)
###the open data shapefiles don't have clear names, so we need to do some pre-processing
###download the data (these are the borough boundaries)
download.file("https://data.cityofnewyork.us/api/geospatial/tqmj-j8zm?method=export&format=Shapefile",
destfile = paste0(zip_dl, "/boroughs.zip"),
mode = "wb")
##unzip the folder
unzip(paste0(zip_dl, "/boroughs.zip"),
exdir=temp_folder)
###we know all the downloads have the file pattern of "geo" with several characters after
old_files <- list.files(temp_folder, full.names = TRUE)
old_files
utils::browseURL(temp_folder)
# rename the download
new_names = gsub("^.*?\\.","boroughs.",old_files)
##move unzipped and clean files to a new folder
file.copy(from=old_files, to=paste0(new_dir, "/", new_names))
file.remove(old_files)
###let's check out the new files
new_files <- list.files(new_dir)
new_files
utils::browseURL(new_dir)
###read in and project shapefiles to 2263
boroughs <- st_transform(st_read(new_dir, "boroughs" ), 2263)
ntas <- st_transform(st_read(new_dir, "ntas"), 2263)
parks = ntas %>% filter(str_detect(ntaname, paste0("park", collapse = "|")))
gc()
###download the csv
download.file("https://data.cityofnewyork.us/api/views/pitm-atqc/rows.csv?accessType=DOWNLOAD&bom=true&format=true",
destfile = paste0(zip_dl, "/open_restaurants.csv"),
mode = "wb")
###remove rows without lat/long data
rest <-  rest[!is.na(rest$Latitude) | !is.na(rest$Longitude), ]
###make the imported table in to a sf dataframe
rest_sf <- st_as_sf(rest , coords = c("Longitude", "Latitude"))
### remove old file
rm(rest)
colnames(rest_sf)
### import the csv
rest <- fread(paste0(zip_dl, "/open_restaurants.csv"), header = TRUE)
colnames(rest)
###remove rows without lat/long data
rest <-  rest[!is.na(rest$Latitude) | !is.na(rest$Longitude), ]
###make the imported table in to a sf dataframe
rest_sf <- st_as_sf(rest , coords = c("Longitude", "Latitude"))
### remove old file
rm(rest)
colnames(rest_sf)
### now let's see what it looks like
###uncomment boroughs to show that you cannot have two datasets with conflicting projections
ggplot()+
geom_sf(data = rest_sf, color="black", size=.8)#+
#geom_sf(data = boroughs, color="lightgrey")
rm(list = ls())
# Load the necessary libraries
library(tidytransit) # Parse GTFS feeds
library(dplyr)
library(tidyr)
library(lubridate)
library(sf)
library(ggplot2)
library(gganimate)   # Animate the ggplot + tween between frames
library(ggspatial)   # Add map tiles
library(stinepack)   # Interpolate between stop times
# Set some simple parameters for the script
feed <- "NYC Subway GTFS"  # Feed list can be found at tidytransit::feedlist
transit_type = 1  # See tidytransit::route_type_names
# Trip departure date and times. Note that these are local time
dep_date = lubridate::today() - days(1)
min_dep_time = "08:00:00"
max_arv_time = "09:00:00"
# Animation length scalar. Smaller = shorter animation
# A value of 1 means 1 minute of animation per hour depending on fps
min_to_hour_ratio = 1
# Animation FPS. Higher values = smoother anim. but bigger file
frames_per_second = 30
##### Get GTFS feed #####
# Download a GTFS feed and parse it with tidytransit
gtfs <- tidytransit::feedlist %>%
filter(t == feed) %>%
pull(url_d) %>%
read_gtfs()
# Keep only the routes (and corresponding trips and stops) specified
route_ids <- gtfs$routes %>%
filter(route_type == transit_type) %>%
pull(route_id)
trip_ids <- gtfs$trips %>%
filter(route_id %in% route_ids) %>%
pull(trip_id)
stop_ids <- gtfs$stop_times %>%
filter(trip_id %in% trip_ids) %>%
pull(stop_id) %>%
unique()
# Load the static shapes of the routes and stops
gtfs_sf <- gtfs %>%
tidytransit::gtfs_as_sf()
route_shapes <- gtfs_sf %>%
get_route_geometry(route_ids) %>%
left_join(gtfs$routes, by = "route_id") %>%
mutate(route_color = paste0("#", route_color))
stop_shapes <- gtfs_sf$stops %>%
filter(stop_id %in% stop_ids)
gc()
gc()
##### Get interpolated trips #####
# Each route is actually a series of points (held in the shapes
# section of the feed) that are joined into a line. We can use
# these points to define the waypoints that vehicles need to follow
route_waypoints <- gtfs$trips %>%
filter(route_id %in% route_ids) %>%
distinct(route_id, shape_id) %>%
left_join(gtfs$shapes, by = "shape_id") %>%
select(-shape_pt_sequence) %>%
rename(
lat = shape_pt_lat,
lon = shape_pt_lon,
dist = shape_dist_traveled
)
View(route_waypoints)
View(gtfs)
shapes <- gtfs$shapes
View(shapes)
waypoints_df <- stops_df %>%
distinct(trip_id, shape_id) %>%
inner_join(route_waypoints, by = "shape_id")
##### Setup #####
# Load the necessary libraries
library(tidytransit) # Parse GTFS feeds
library(dplyr)
library(tidyr)
library(lubridate)
library(sf)
library(ggplot2)
library(gganimate)   # Animate the ggplot + tween between frames
library(ggspatial)   # Add map tiles
library(stinepack)   # Interpolate between stop times
# Set some simple parameters for the script
feed <- "NYC Subway GTFS"  # Feed list can be found at tidytransit::feedlist
transit_type = 1  # See tidytransit::route_type_names
# Trip departure date and times. Note that these are local time
dep_date = lubridate::today() - days(1)
min_dep_time = "08:00:00"
max_arv_time = "09:00:00"
# Animation length scalar. Smaller = shorter animation
# A value of 1 means 1 minute of animation per hour depending on fps
min_to_hour_ratio = 1
# Animation FPS. Higher values = smoother anim. but bigger file
frames_per_second = 30
##### Get GTFS feed #####
# Download a GTFS feed and parse it with tidytransit
gtfs <- tidytransit::feedlist %>%
filter(t == feed) %>%
pull(url_d) %>%
read_gtfs()
# Keep only the routes (and corresponding trips and stops) specified
route_ids <- gtfs$routes %>%
filter(route_type == transit_type) %>%
pull(route_id)
trip_ids <- gtfs$trips %>%
filter(route_id %in% route_ids) %>%
pull(trip_id)
stop_ids <- gtfs$stop_times %>%
filter(trip_id %in% trip_ids) %>%
pull(stop_id) %>%
unique()
# Load the static shapes of the routes and stops
gtfs_sf <- gtfs %>%
tidytransit::gtfs_as_sf()
route_shapes <- gtfs_sf %>%
get_route_geometry(route_ids) %>%
left_join(gtfs$routes, by = "route_id") %>%
mutate(route_color = paste0("#", route_color))
stop_shapes <- gtfs_sf$stops %>%
filter(stop_id %in% stop_ids)
gc()
##### Get interpolated trips #####
# Each route is actually a series of points (held in the shapes
# section of the feed) that are joined into a line. We can use
# these points to define the waypoints that vehicles need to follow
route_waypoints <- gtfs$trips %>%
filter(route_id %in% route_ids) %>%
distinct(route_id, shape_id) %>%
left_join(gtfs$shapes, by = "shape_id") %>%
select(-shape_pt_sequence) %>%
rename(
lat = shape_pt_lat,
lon = shape_pt_lon,
dist = shape_dist_traveled
)
# Create a data frame of stops with time stopped and geographic
# location. Only include trips within the time boundaries
# specified at top of script
stops_df <- gtfs$trips %>%
filter(route_id %in% route_ids) %>%
inner_join(
filter_stop_times(gtfs, dep_date, min_dep_time, max_arv_time),
by = "trip_id"
) %>%
inner_join(gtfs$stops, by = "stop_id") %>%
distinct(
route_id, shape_id, trip_id, arrival_time,
lat = stop_lat, lon = stop_lon, dist = shape_dist_traveled
)
# For each trip, get ALL the waypoints along the route
# (basically the points between each stop for each trip)
waypoints_df <- stops_df %>%
distinct(trip_id, shape_id) %>%
inner_join(route_waypoints, by = "shape_id")
# Combine the known stop times with the unknown waypoint times,
# then fill in the missing waypoint data with time-series
# imputation based on the distance column
final_df <- stops_df %>%
bind_rows(waypoints_df) %>%
group_by(trip_id) %>%
filter(sum(!is.na(arrival_time)) > 1) %>%
mutate(
time = as.POSIXct(
arrival_time, format = "%H:%M:%S",
tz = gtfs$agency$agency_timezone
) - days(1)
) %>%
arrange(trip_id, dist) %>%
group_by(trip_id, dist) %>%
filter(row_number() == 1) %>%
group_by(trip_id) %>%
mutate(
time = as.POSIXct(
stinepack::na.stinterp(
as.numeric(time),
along = dist,
na.rm = FALSE
),
origin = dep_date,
tz = gtfs$agency$agency_timezone
)
) %>%
ungroup() %>%
filter(!is.na(time))
##### Create animation #####
# If bounding box is not set, will use bbox of routes
if (!exists("bbox")) bbox <- st_bbox(route_shapes)
route_shapes = route_shapes[route_shapes$route_color!="#",]
ggplot(route_shapes) +
annotation_map_tile(type = "cartolight", zoomin = 0, progress = "none") +
geom_sf(data = route_shapes, aes(color = route_color), size = 1.5)
View(waypoints_df)
ggplot()+
geom_sf(data = route_shapes, aes(color = route_color), size = 1.5)+
geom_point(data = waypoints_df,
aes(x = lon, y = lat, group = trip_id),
size = 1.5,
shape = 15)
remove.packages("gtfs2gps")
install.packages("gtfs2gps")
rm(list = ls())
install.packages("gtfs2gps")
# load libraries
library(gtfs2gps)
library(ggplot2)
library(gganimate)
library(data.table)
library(ggthemes)
library(sf)
#library(viridis)
library(sfheaders)
library(tidytransit)
library(gtfsio)
# get local GTFS.zip file
gtfs_zip <- system.file("extdata/saopaulo.zip", package="gtfs2gps" )
# read gtfs
gtfs_dt <- gtfs2gps::read_gtfs(gtfs_zip)
# get transport network as sf object
shapes_sf <- gtfs2gps::gtfs_shapes_as_sf(gtfs_dt)
# Convert GTFS data into a data.table with GPS-like records
gps_dt <- gtfs2gps(gtfs_dt, parallel = T)
# subset time interval. Get only vehicle positions between 7am and 7:30am
gps_dt2 <- gps_dt[ between(timestamp, as.ITime("07:00:"), as.ITime("07:31"))]
sessionInfo()
# Convert GTFS data into a data.table with GPS-like records
gps_dt <- gtfs2gps::gtfs2gps(gtfs_dt, spatial_resolution = 30, progress = T, parallel = T)
# Convert GTFS data into a data.table with GPS-like records
gps_dt <- gtfs2gps::gtfs2gps(gtfs_dt, spatial_resolution = 30, parallel = T)
# load libraries
library(gtfs2gps)
library(ggplot2)
library(gganimate)
library(data.table)
library(ggthemes)
library(sf)
#library(viridis)
library(sfheaders)
#library(tidytransit)
#library(gtfsio)
###### 1. process public transport data  ------------------
# get local GTFS.zip file
gtfs_zip <- system.file("extdata/saopaulo.zip", package="gtfs2gps" )
# read gtfs
gtfs_dt <- gtfs2gps::read_gtfs(gtfs_zip)
# get transport network as sf object
shapes_sf <- gtfs2gps::gtfs_shapes_as_sf(gtfs_dt)
# Convert GTFS data into a data.table with GPS-like records
gps_dt <- gtfs2gps::gtfs2gps(gtfs_dt, spatial_resolution = 30, parallel = T)
