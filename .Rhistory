suppressMessages(library(rgdal)) ###used for projections and importing data
suppressMessages(library(ggplot2)) ##creating the map
suppressMessages(library(sf)) ## data is stored as sf dataframes
suppressMessages(library(data.table))
suppressMessages(library(dplyr)) ##data transformations
#library(GISTools)
#library(stats)
suppressMessages(library(RColorBrewer)) #color palettes
suppressMessages(library(stringr)) ##string manipulation when filtering dataframes
suppressMessages(library(extrafont)) ##fonts for map
suppressMessages(loadfonts(device = "win")) ### fonts for map
suppressMessages(library(ggthemes)) ##map design
library(ggsn) ##scalebar
library(magrittr) ##pipes
library(classInt) ##intervals for legend
library(scales) ## commas in legend
library(grDevices) ### added for export to PDF
### import the csv
rest <- fread("C:/Users/argun/Documents/Shapefiles/NYC/Testing/open_restaurants.csv", header = TRUE)
###remove rows without lat/long data
rest <-  rest[!is.na(rest$Latitude) | !is.na(rest$Longitude), ]
###make the imported table in to a sf dataframe
rest_sf <- st_as_sf(rest , coords = c("Longitude", "Latitude"))
### remove old file
rm(rest)
### set coordinate reference system
sf_proj <- st_set_crs(rest_sf, value = 4326)
ggplot()+
geom_sf(data = sf_proj, color="black", size=.8)
### set projection
sf_proj <- st_transform(sf_proj, "EPSG: 2263")
##check units
st_crs(sf_proj)$units_gdal
rests_dt <- as.data.table(unique(sf_proj, by = "objectid")) ##data table version for dplyr aggregation
rests_sf <- unique(sf_proj, by = "objectid") ## sf version for spatial join
rm(sf_proj)
rm(rest_sf)
###read in and project shapefiles to 2263
shps <- "C:/Users/argun/Documents/Shapefiles/NYC/Testing/shps"
boroughs <- st_transform(st_read(shps, "boroughs" ), 2263)
ntas <- st_transform(st_read(shps, "ntas"), 2263)
parks = ntas %>% filter(str_detect(ntaname, paste0("park", collapse = "|")))
parks_properties <- st_transform(st_read(shps, "parks_properties"), 2263)
ggplot()+
geom_sf(data=ntas, aes(fill="Neighborhood Boundaries"), color="black", lwd=.002)+
#geom_sf(data=parks, fill="#a1c690", color="darkgrey")+
geom_sf(data=parks_properties, aes(fill="Parks"), lwd=.002)+
#geom_sf(data = lion_condensed, color="#f2f2f2", aes(color="Street"), size=.001)+
geom_sf(data=rests_sf, aes(colour="Open Restaurant Permits"), color="red", size=.2, show.legend = "point", shape=16)+
theme(panel.background = element_rect(fill = "white"),
axis.ticks = element_blank(),
axis.text = element_blank(),
panel.grid = element_line(color = "white", size = 0.8),
plot.title= element_text(colour="black", size = 24, face = "bold", hjust=0.5,),
legend.position = "left",
legend.spacing.y = unit(0, 'cm'))+
###legend for polygons
scale_fill_manual(values = c("Parks" = "#a1c690", "Neighborhood Boundaries"="white"), name="Legend",
guide = guide_legend(override.aes = list(linetype = c("solid", "solid"),
shape = c(NA, NA)))) +
###legend for points
scale_color_manual(values = c("Open Restaurant Permits" = "red"), name = NULL,
guide=guide_legend(override.aes = list(shape = c(16),
size=2))) +
labs(title = "Open Restaurant Permits \n New York City",
caption = "Source: NYC Open Data, Retrieved on 2/22/2022")
