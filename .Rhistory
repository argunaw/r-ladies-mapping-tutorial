suppressMessages(library(rgdal)) ###used for projections and importing data
suppressMessages(library(ggplot2)) ##creating the map
suppressMessages(library(sf)) ## data is stored as sf dataframes
suppressMessages(library(data.table))
suppressMessages(library(dplyr)) ##data transformations
#library(GISTools)
#library(stats)
suppressMessages(library(RColorBrewer)) #color palettes
suppressMessages(library(stringr)) ##string manipulation when filtering dataframes
suppressMessages(library(extrafont)) ##fonts for map
suppressMessages(loadfonts(device = "win")) ### fonts for map
suppressMessages(library(ggthemes)) ##map design
library(ggsn) ##scalebar
library(magrittr) ##pipes
library(classInt) ##intervals for legend
library(scales) ## commas in legend
library(grDevices) ### added for export to PDF
### import the csv
rest <- fread("C:/Users/argun/Documents/Shapefiles/NYC/Testing/open_restaurants.csv", header = TRUE)
###remove rows without lat/long data
rest <-  rest[!is.na(rest$Latitude) | !is.na(rest$Longitude), ]
###make the imported table in to a sf dataframe
rest_sf <- st_as_sf(rest , coords = c("Longitude", "Latitude"))
### remove old file
rm(rest)
### set coordinate reference system
sf_proj <- st_set_crs(rest_sf, value = 4326)
ggplot()+
geom_sf(data = sf_proj, color="black", size=.8)
### set projection
sf_proj <- st_transform(sf_proj, "EPSG: 2263")
##check units
st_crs(sf_proj)$units_gdal
rests_dt <- as.data.table(unique(sf_proj, by = "objectid")) ##data table version for dplyr aggregation
rests_sf <- unique(sf_proj, by = "objectid") ## sf version for spatial join
rm(sf_proj)
rm(rest_sf)
###read in and project shapefiles to 2263
shps <- "C:/Users/argun/Documents/Shapefiles/NYC/Testing/shps"
boroughs <- st_transform(st_read(shps, "boroughs" ), 2263)
ntas <- st_transform(st_read(shps, "ntas"), 2263)
parks = ntas %>% filter(str_detect(ntaname, paste0("park", collapse = "|")))
parks_properties <- st_transform(st_read(shps, "parks_properties"), 2263)
ggplot()+
geom_sf(data=ntas, aes(fill="Neighborhood Boundaries"), color="black", lwd=.002)+
#geom_sf(data=parks, fill="#a1c690", color="darkgrey")+
geom_sf(data=parks_properties, aes(fill="Parks"), lwd=.002)+
#geom_sf(data = lion_condensed, color="#f2f2f2", aes(color="Street"), size=.001)+
geom_sf(data=rests_sf, aes(colour="Open Restaurant Permits"), color="red", size=.2, show.legend = "point", shape=16)+
theme(panel.background = element_rect(fill = "white"),
axis.ticks = element_blank(),
axis.text = element_blank(),
panel.grid = element_line(color = "white", size = 0.8),
plot.title= element_text(colour="black", size = 24, face = "bold", hjust=0.5,),
legend.position = "left",
legend.spacing.y = unit(0, 'cm'))+
###legend for polygons
scale_fill_manual(values = c("Parks" = "#a1c690", "Neighborhood Boundaries"="white"), name="Legend",
guide = guide_legend(override.aes = list(linetype = c("solid", "solid"),
shape = c(NA, NA)))) +
###legend for points
scale_color_manual(values = c("Open Restaurant Permits" = "red"), name = NULL,
guide=guide_legend(override.aes = list(shape = c(16),
size=2))) +
labs(title = "Open Restaurant Permits \n New York City",
caption = "Source: NYC Open Data, Retrieved on 2/22/2022")
library(rgdal) ###used for projections and importing data
library(ggplot2) ##creating the map
library(sf) ## data is stored as sf dataframes
library(data.table)
library(dplyr) ##data transformations
library(RColorBrewer) #color palettes
library(stringr) ##string manipulation when filtering dataframes
library(ggthemes) ##map design
library(magrittr) ##pipes
library(classInt) ##intervals for legend
library(grDevices) ### added for export to PDF
library(tmap) ###interactive mapping
#### destination for all unzipped folders
zip_dl = "C:/Users/argun/Documents/Shapefiles/NYC/Testing"
##create a temporary folder to unzip (only do this once, not for every file)
temp_folder= paste0(zip_dl, "/temp")
dir.create(temp_folder)
###final folder for all shapefiles
###create new folder (only do this once, not for every file)
new_dir <- "C:/Users/argun/Documents/Shapefiles/NYC/Testing/shps"
dir.create(new_dir)
###the open data shapefiles don't have clear names, so we need to do some pre-processing
###download the data (these are the borough boundaries)
download.file("https://data.cityofnewyork.us/api/geospatial/tqmj-j8zm?method=export&format=Shapefile",
destfile = paste0(zip_dl, "/boroughs.zip"),
mode = "wb")
##unzip the folder
unzip("C:/Users/argun/Documents/Shapefiles/NYC/Testing/boroughs.zip",
exdir=temp_folder)
###we know all the downloads have the file pattern of "geo" with several characters after
old_files <- list.files(temp_folder, full.names = TRUE)
old_files
# rename the download
new_names = gsub("^.*?\\.","boroughs.",old_files)
##move unzipped and clean files to a new folder
file.copy(from=old_files, to=paste0(new_dir, "/", new_names))
file.remove(old_files)
###let's check out the new files
list.files(new_dir)
####NTAS, eventually derive parks from this
download.file("https://data.cityofnewyork.us/api/geospatial/d3qk-pfyz?method=export&format=Shapefile",
destfile = paste0(zip_dl, "/ntas.zip"),
mode = "wb")
unzip(paste0(zip_dl, "/ntas.zip"),
exdir=temp_folder)
old_files <- list.files(temp_folder, pattern = "geo*", full.names = TRUE)
new_names = gsub("^.*?\\.","ntas.",old_files)
file.copy(from=old_files, to=paste0(new_dir, "/", new_names))
file.remove(old_files)
list.files(new_dir)
###read in and project shapefiles to 2263
boroughs <- st_transform(st_read(new_dir, "boroughs" ), 2263)
ntas <- st_transform(st_read(new_dir, "ntas"), 2263)
parks = ntas %>% filter(str_detect(ntaname, paste0("park", collapse = "|")))
gc()
###download the csv
download.file("https://data.cityofnewyork.us/api/views/pitm-atqc/rows.csv?accessType=DOWNLOAD&bom=true&format=true",
destfile = "C:/Users/argun/Documents/Shapefiles/NYC/Testing/open_restaurants.csv",
mode = "wb")
### import the csv
rest <- fread("C:/Users/argun/Documents/Shapefiles/NYC/Testing/open_restaurants.csv", header = TRUE)
colnames(rest)
###remove rows without lat/long data
rest <-  rest[!is.na(rest$Latitude) | !is.na(rest$Longitude), ]
###make the imported table in to a sf dataframe
rest_sf <- st_as_sf(rest , coords = c("Longitude", "Latitude"))
### remove old file
rm(rest)
colnames(rest_sf)
rest_sf$geometry
##check coordinate system
st_crs(rest_sf)
### now let's see what it looks like
###uncomment boroughs to show that you cannot have two datasets with conflicting projections
ggplot()+
geom_sf(data = rest_sf, color="black", size=.8)#+
#geom_sf(data = boroughs, color="lightgrey")
st_crs(rest_sf)$IsGeographic ##to check is the CRS is geographic or not
st_crs(rest_sf)$units_gdal ##to find out the CRS units
st_crs(rest_sf)$srid ##extracts its ‘SRID’ identifier (when available)
st_crs(rest_sf)$proj4string ##extracts the proj4string representation
### set coordinate reference system
###World Geodetic System, 99% of GPS systems use this, I have yet to use data that doesn't
sf_proj <- st_set_crs(rest_sf, value = 4326)
ggplot()+
geom_sf(data = sf_proj, color="black", size=.8)
st_crs(sf_proj)$units_gdal ##to find out the CRS units
### set projection
sf_proj <- st_transform(sf_proj, "EPSG: 2263")
##check units
st_crs(sf_proj)$units_gdal ##to find out the CRS units
st_crs(sf_proj)$srid ##extracts its ‘SRID’ identifier (when available)
st_crs(sf_proj)$proj4string ##extracts the proj4string representation
rm(rest_sf)
sf_proj %>%
group_by(objectid) %>%
filter(n()>1)
rests_sf <- unique(sf_proj, by = "objectid") ## sf version for spatial join
rm(sf_proj)
gc()
ggplot()+
geom_sf(data=boroughs, fill=NA, color="black", lwd=.01)+
geom_sf(data=ntas, fill=NA, color="black", lwd=.002)+
geom_sf(data=parks, fill="#a1c690", color="darkgrey")+
geom_sf(data=rests_sf, color="red", size=.2, shape=16)+
theme(panel.background = element_rect(fill = "white"),
axis.ticks = element_blank(),
axis.text = element_blank(),
panel.grid = element_line(color = "white", size = 0.8),
plot.title= element_text(colour="black", size = 20, face = "bold", hjust=0.5))+
labs(title = "Open Restaurant Permits \n New York City",
caption = "Source: NYC Open Data, Retrieved on 2/22/2022")
ntas$count_restaurants <- lengths(st_intersects(ntas, rests_sf))
head(ntas)
###normalize counts
nta_remove = c("cemetery", "Airport") ###list of outliers
airports = c("Airport")
nta_rest <- ntas %>%
filter(!grepl(paste(nta_remove, collapse="|"), ntaname)) %>% ##remove outliers
mutate(rest_sqmi= count_restaurants/(shape_area/27878400))  ###get restaurants per square mile
### keep the airports as a separate df
airports <- ntas %>%
filter(grepl(paste(airports, collapse="|"), ntaname))
ggplot(nta_rest) +
geom_sf(aes(fill=rest_sqmi))+
scale_fill_viridis_c(option = "D", na.value = "darkgrey") +
geom_sf(data=airports, fill="darkgrey")+
geom_sf(data=parks, fill="#a1c690", color="darkgrey")+
theme(panel.background = element_rect(fill = "white"),
axis.ticks = element_blank(),
axis.text = element_blank(),
panel.grid = element_line(color = "white", size = 0.8),
plot.title= element_text(colour="black", size = 24, face = "bold", hjust=0.5,))+
labs(title = "Open Restaurant Permits Per Square Mile \n New York City")
nta_rest[nta_rest$rest_sqmi==0,]
### remove NTAs with no restaurants
nta_no_rest <- nta_rest %>%
filter(rest_sqmi==0)
nta_rest <- nta_rest %>%
filter(rest_sqmi > 0)
# get quantile breaks.
breaks_qt <- classIntervals(c(min(nta_rest$rest_sqmi), nta_rest$rest_sqmi), n = 5, style = "quantile")
### use the "cut" function to add a breaks column in your sf object
nta_rest <- mutate(nta_rest, brks = cut(rest_sqmi, breaks_qt$brks, include.lowest = TRUE,dig.lab=4))
###results include the upper bound but NOT the lower bound!
breaks_qt
##map colors
brewer.pal(n=5,"YlOrRd")
ggplot() +
geom_sf(data=nta_rest, aes(fill=brks)) +
geom_sf(data=parks,  aes(fill="Parks/Cemeteries"))+
geom_sf(data=nta_no_rest, aes(fill="No Restaurants"))+
geom_sf(data=airports, aes(fill="Airports"))+
scale_fill_manual("Legend",
values=c('[0.4253,4.546]'='#FFFFB2',
'(4.546,13.56]'='#FECC5C',
'(13.56,31.94]'='#FD8D3C',
'(31.94,93.01]'='#F03B20',
'(93.01,1359]'='#BD0026',
'Parks/Cemeteries'='#a1c690',
'No Restaurants'="darkgrey",
'Airports'="black"),
breaks=c('[0.4253,4.546]','(4.546,13.56]','(13.56,31.94]',
'(31.94,93.01]','(93.01,1359]', 'Parks/Cemeteries', 'No Restaurants', 'Airports'),
labels=c('[0.4253,4.546]','(4.546,13.56]','(13.56,31.94]',
'(31.94,93.01]','(93.01,1359]', 'Parks/Cemeteries', 'No Restaurants','Airports'),
guide = guide_legend(override.aes = list(linetype = c("solid", "solid", "solid","solid","solid", "solid", "solid", "solid"), shape = c(NA, NA,NA,NA,NA, NA, NA, NA))))+
labs(title = "Open Restaurant Permits \nPer Square Mile \nby Neigborhood Tabulation Area",
caption="source: NYC Open Data, Retrieved on 2/24/2022")
tmap_mode("plot")+
tm_shape(nta_rest) +
tm_polygons("rest_sqmi",
style="quantile",
legend.format = list(text.separator="-", fun = function(x) formatC(x, digits = 2, big.mark = ",", format = "f")) ,
title="New York City\nOpen Restaurant Permits \nper Square Mile")+
tm_shape(nta_no_rest)+
tm_polygons(col = "darkgrey") +
tm_shape(airports)+
tm_polygons(col="black")+
tm_shape(parks)+
tm_polygons(col="#a1c690", border.col = "darkgrey")
tmap_mode("view")
#tm_shape(ntas)+
#  tm_polygons(col="white", alpha = .5)+
tmap_leaflet(tm_shape(nta_rest)+
tm_symbols(shape=21, col="red", size = .0005,
popup.vars=c("Restaurant Name"="Restaurant Name", "Seating Interest (Sidewalk/Roadway/Both)"="Seating Interest (Sidewalk/Roadway/Both)")))
tmap_mode("view")
#tm_shape(ntas)+
#  tm_polygons(col="white", alpha = .5)+
tmap_leaflet(tm_shape(nta_rest)+
tm_symbols(shape=21, col="red", size = .0005,
popup.vars=c("Restaurant Name"="Restaurant Name", "Seating Interest (Sidewalk/Roadway/Both)"="Seating Interest (Sidewalk/Roadway/Both)")))
tmap_mode("view")
tm_shape(ntas)+
tm_polygons(col="white", alpha = .5)+
tmap_leaflet(tm_shape(nta_rest)+
tm_symbols(shape=21, col="red", size = .0005,
popup.vars=c("Restaurant Name"="Restaurant Name", "Seating Interest (Sidewalk/Roadway/Both)"="Seating Interest (Sidewalk/Roadway/Both)")))
tmap_mode("view")
tm_shape(ntas)+
tm_polygons(col="white", alpha = .5)+
tm_shape(nta_rest)+
tm_symbols(shape=21, col="red", size = .0005,
popup.vars=c("Restaurant Name"="Restaurant Name", "Seating Interest (Sidewalk/Roadway/Both)"="Seating Interest (Sidewalk/Roadway/Both)"))
colnames(nta_rest)
tmap_mode("view")
tm_shape(ntas)+
tm_polygons(col="white", alpha = .5)+
tm_shape(rests_sf)+
tm_symbols(shape=21, col="red", size = .0005,
popup.vars=c("Restaurant Name"="Restaurant Name", "Seating Interest (Sidewalk/Roadway/Both)"="Seating Interest (Sidewalk/Roadway/Both)"))
